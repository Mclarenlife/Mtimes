import UIKit
import UniformTypeIdentifiers

class SettingsViewController: UIViewController {
    
    // MARK: - ÊªöÂä®ËßÜÂõæ
    private lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.showsVerticalScrollIndicator = false
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        return scrollView
    }()
    
    private lazy var contentView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private lazy var titleLabel: UILabel = {
        let label = UILabel()
        label.text = "ËÆæÁΩÆ"
        label.font = UIFont.systemFont(ofSize: 32, weight: .bold)
        label.textColor = UIColor.label
        label.textAlignment = .center
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var themeSectionView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.secondarySystemBackground
        view.layer.cornerRadius = 20
        view.translatesAutoresizingMaskIntoConstraints = false
        view.isUserInteractionEnabled = true
        return view
    }()
    
    private lazy var themeTitleLabel: UILabel = {
        let label = UILabel()
        label.text = "‰∏ªÈ¢òËÆæÁΩÆ"
        label.font = UIFont.systemFont(ofSize: 20, weight: .semibold)
        label.textColor = UIColor.label
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var themeDescriptionLabel: UILabel = {
        let label = UILabel()
        label.text = "ÈÄâÊã©ÊÇ®ÂñúÊ¨¢ÁöÑÂ∫îÁî®Â§ñËßÇ"
        label.font = UIFont.systemFont(ofSize: 16)
        label.textColor = UIColor.secondaryLabel
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var lightModeButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("‚òÄÔ∏è ÊµÖËâ≤Ê®°Âºè", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.tertiarySystemBackground
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.separator.cgColor
        button.setTitleColor(UIColor.label, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(lightModeTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var darkModeButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("üåô Ê∑±Ëâ≤Ê®°Âºè", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.tertiarySystemBackground
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.separator.cgColor
        button.setTitleColor(UIColor.label, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(darkModeTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var systemModeButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("‚öôÔ∏è Ë∑üÈöèÁ≥ªÁªü", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.tertiarySystemBackground
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.separator.cgColor
        button.setTitleColor(UIColor.label, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(systemModeTapped), for: .touchUpInside)
        return button
    }()
    
    // MARK: - Êï∞ÊçÆÁÆ°ÁêÜÈÉ®ÂàÜ
    private lazy var dataSectionView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.secondarySystemBackground
        view.layer.cornerRadius = 20
        view.translatesAutoresizingMaskIntoConstraints = false
        view.isUserInteractionEnabled = true
        return view
    }()
    
    private lazy var dataTitleLabel: UILabel = {
        let label = UILabel()
        label.text = "Êï∞ÊçÆÁÆ°ÁêÜ"
        label.font = UIFont.systemFont(ofSize: 20, weight: .semibold)
        label.textColor = UIColor.label
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var dataDescriptionLabel: UILabel = {
        let label = UILabel()
        label.text = "ÂØºÂÖ•„ÄÅÂØºÂá∫ÊàñÊ∏ÖÁ©∫ÊÇ®ÁöÑÊâìÂç°Êï∞ÊçÆ"
        label.font = UIFont.systemFont(ofSize: 16)
        label.textColor = UIColor.secondaryLabel
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var exportButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("üì§ ÂØºÂá∫Êï∞ÊçÆ", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.tertiarySystemBackground
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.separator.cgColor
        button.setTitleColor(UIColor.label, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(exportDataTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var importButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("üì• ÂØºÂÖ•Êï∞ÊçÆ", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.tertiarySystemBackground
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.separator.cgColor
        button.setTitleColor(UIColor.label, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(importDataTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var clearDataButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("üóëÔ∏è Ê∏ÖÁ©∫ÂÖ®ÈÉ®Êï∞ÊçÆ", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.systemRed.withAlphaComponent(0.1)
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.systemRed.cgColor
        button.setTitleColor(UIColor.systemRed, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(clearDataTapped), for: .touchUpInside)
        return button
    }()
    
    // MARK: - ÂÖ≥‰∫éËΩØ‰ª∂ÈÉ®ÂàÜ
    private lazy var aboutSectionView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.secondarySystemBackground
        view.layer.cornerRadius = 20
        view.translatesAutoresizingMaskIntoConstraints = false
        view.isUserInteractionEnabled = true
        return view
    }()
    
    private lazy var aboutTitleLabel: UILabel = {
        let label = UILabel()
        label.text = "ÂÖ≥‰∫éËΩØ‰ª∂"
        label.font = UIFont.systemFont(ofSize: 20, weight: .semibold)
        label.textColor = UIColor.label
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var aboutDescriptionLabel: UILabel = {
        let label = UILabel()
        label.text = "Â∫îÁî®‰ø°ÊÅØÂíåËÅîÁ≥ªÊñπÂºè"
        label.font = UIFont.systemFont(ofSize: 16)
        label.textColor = UIColor.secondaryLabel
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private lazy var versionButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("üì± ÁâàÊú¨Âè∑: 1.0.0", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.tertiarySystemBackground
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.separator.cgColor
        button.setTitleColor(UIColor.label, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(versionButtonTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var feedbackButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("ÂèçÈ¶àÂª∫ËÆÆ: xiangjinleee@gmail.com", for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 18, weight: .medium)
        button.backgroundColor = UIColor.tertiarySystemBackground
        button.layer.cornerRadius = 16
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.separator.cgColor
        button.setTitleColor(UIColor.label, for: .normal)
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(feedbackButtonTapped), for: .touchUpInside)
        return button
    }()
    
    // MARK: - Â∫ïÈÉ®ÁïôÁôΩÂå∫Âüü
    private lazy var bottomSpacerView: UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.clear
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private var currentThemeMode: UIUserInterfaceStyle = .unspecified
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        updateCurrentThemeMode()
        updateButtonStates()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        updateCurrentThemeMode()
        updateButtonStates()
    }
    
    private func setupUI() {
        view.backgroundColor = UIColor.systemBackground
        
        // Ê∑ªÂä†ÊªöÂä®ËßÜÂõæ
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        
        // Ê∑ªÂä†ÊâÄÊúâÂ≠êËßÜÂõæÂà∞ÂÜÖÂÆπËßÜÂõæ
        contentView.addSubview(titleLabel)
        contentView.addSubview(themeSectionView)
        contentView.addSubview(dataSectionView)
        contentView.addSubview(aboutSectionView)
        contentView.addSubview(bottomSpacerView)
        
        themeSectionView.addSubview(themeTitleLabel)
        themeSectionView.addSubview(themeDescriptionLabel)
        themeSectionView.addSubview(lightModeButton)
        themeSectionView.addSubview(darkModeButton)
        themeSectionView.addSubview(systemModeButton)
        
        dataSectionView.addSubview(dataTitleLabel)
        dataSectionView.addSubview(dataDescriptionLabel)
        dataSectionView.addSubview(exportButton)
        dataSectionView.addSubview(importButton)
        dataSectionView.addSubview(clearDataButton)
        
        aboutSectionView.addSubview(aboutTitleLabel)
        aboutSectionView.addSubview(aboutDescriptionLabel)
        aboutSectionView.addSubview(versionButton)
        aboutSectionView.addSubview(feedbackButton)
        
        NSLayoutConstraint.activate([
            // ÊªöÂä®ËßÜÂõæÁ∫¶Êùü
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            // ÂÜÖÂÆπËßÜÂõæÁ∫¶Êùü
            contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),
            
            // Ê†áÈ¢òÁ∫¶Êùü
            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 40),
            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            // ‰∏ªÈ¢òËÆæÁΩÆÈÉ®ÂàÜÁ∫¶Êùü
            themeSectionView.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 40),
            themeSectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            themeSectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            themeTitleLabel.topAnchor.constraint(equalTo: themeSectionView.topAnchor, constant: 25),
            themeTitleLabel.leadingAnchor.constraint(equalTo: themeSectionView.leadingAnchor, constant: 25),
            themeTitleLabel.trailingAnchor.constraint(equalTo: themeSectionView.trailingAnchor, constant: -25),
            
            themeDescriptionLabel.topAnchor.constraint(equalTo: themeTitleLabel.bottomAnchor, constant: 12),
            themeDescriptionLabel.leadingAnchor.constraint(equalTo: themeSectionView.leadingAnchor, constant: 25),
            themeDescriptionLabel.trailingAnchor.constraint(equalTo: themeSectionView.trailingAnchor, constant: -25),
            
            lightModeButton.topAnchor.constraint(equalTo: themeDescriptionLabel.bottomAnchor, constant: 25),
            lightModeButton.leadingAnchor.constraint(equalTo: themeSectionView.leadingAnchor, constant: 25),
            lightModeButton.trailingAnchor.constraint(equalTo: themeSectionView.trailingAnchor, constant: -25),
            lightModeButton.heightAnchor.constraint(equalToConstant: 70),
            
            darkModeButton.topAnchor.constraint(equalTo: lightModeButton.bottomAnchor, constant: 16),
            darkModeButton.leadingAnchor.constraint(equalTo: themeSectionView.leadingAnchor, constant: 25),
            darkModeButton.trailingAnchor.constraint(equalTo: themeSectionView.trailingAnchor, constant: -25),
            darkModeButton.heightAnchor.constraint(equalToConstant: 70),
            
            systemModeButton.topAnchor.constraint(equalTo: darkModeButton.bottomAnchor, constant: 16),
            systemModeButton.leadingAnchor.constraint(equalTo: themeSectionView.leadingAnchor, constant: 25),
            systemModeButton.trailingAnchor.constraint(equalTo: themeSectionView.trailingAnchor, constant: -25),
            systemModeButton.heightAnchor.constraint(equalToConstant: 70),
            systemModeButton.bottomAnchor.constraint(equalTo: themeSectionView.bottomAnchor, constant: -25),
            
            // Êï∞ÊçÆÁÆ°ÁêÜÈÉ®ÂàÜÁ∫¶Êùü
            dataSectionView.topAnchor.constraint(equalTo: themeSectionView.bottomAnchor, constant: 30),
            dataSectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            dataSectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            dataTitleLabel.topAnchor.constraint(equalTo: dataSectionView.topAnchor, constant: 25),
            dataTitleLabel.leadingAnchor.constraint(equalTo: dataSectionView.leadingAnchor, constant: 25),
            dataTitleLabel.trailingAnchor.constraint(equalTo: dataSectionView.trailingAnchor, constant: -25),
            
            dataDescriptionLabel.topAnchor.constraint(equalTo: dataTitleLabel.bottomAnchor, constant: 12),
            dataDescriptionLabel.leadingAnchor.constraint(equalTo: dataSectionView.leadingAnchor, constant: 25),
            dataDescriptionLabel.trailingAnchor.constraint(equalTo: dataSectionView.trailingAnchor, constant: -25),
            
            exportButton.topAnchor.constraint(equalTo: dataDescriptionLabel.bottomAnchor, constant: 25),
            exportButton.leadingAnchor.constraint(equalTo: dataSectionView.leadingAnchor, constant: 25),
            exportButton.trailingAnchor.constraint(equalTo: dataSectionView.trailingAnchor, constant: -25),
            exportButton.heightAnchor.constraint(equalToConstant: 70),
            
            importButton.topAnchor.constraint(equalTo: exportButton.bottomAnchor, constant: 16),
            importButton.leadingAnchor.constraint(equalTo: dataSectionView.leadingAnchor, constant: 25),
            importButton.trailingAnchor.constraint(equalTo: dataSectionView.trailingAnchor, constant: -25),
            importButton.heightAnchor.constraint(equalToConstant: 70),
            
            clearDataButton.topAnchor.constraint(equalTo: importButton.bottomAnchor, constant: 16),
            clearDataButton.leadingAnchor.constraint(equalTo: dataSectionView.leadingAnchor, constant: 25),
            clearDataButton.trailingAnchor.constraint(equalTo: dataSectionView.trailingAnchor, constant: -25),
            clearDataButton.heightAnchor.constraint(equalToConstant: 70),
            clearDataButton.bottomAnchor.constraint(equalTo: dataSectionView.bottomAnchor, constant: -25),
            
            // ÂÖ≥‰∫éËΩØ‰ª∂ÈÉ®ÂàÜÁ∫¶Êùü
            aboutSectionView.topAnchor.constraint(equalTo: dataSectionView.bottomAnchor, constant: 30),
            aboutSectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
            aboutSectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),
            
            aboutTitleLabel.topAnchor.constraint(equalTo: aboutSectionView.topAnchor, constant: 25),
            aboutTitleLabel.leadingAnchor.constraint(equalTo: aboutSectionView.leadingAnchor, constant: 25),
            aboutTitleLabel.trailingAnchor.constraint(equalTo: aboutSectionView.trailingAnchor, constant: -25),
            
            aboutDescriptionLabel.topAnchor.constraint(equalTo: aboutTitleLabel.bottomAnchor, constant: 12),
            aboutDescriptionLabel.leadingAnchor.constraint(equalTo: aboutSectionView.leadingAnchor, constant: 25),
            aboutDescriptionLabel.trailingAnchor.constraint(equalTo: aboutSectionView.trailingAnchor, constant: -25),
            
            versionButton.topAnchor.constraint(equalTo: aboutDescriptionLabel.bottomAnchor, constant: 25),
            versionButton.leadingAnchor.constraint(equalTo: aboutSectionView.leadingAnchor, constant: 25),
            versionButton.trailingAnchor.constraint(equalTo: aboutSectionView.trailingAnchor, constant: -25),
            versionButton.heightAnchor.constraint(equalToConstant: 70),
            
            feedbackButton.topAnchor.constraint(equalTo: versionButton.bottomAnchor, constant: 16),
            feedbackButton.leadingAnchor.constraint(equalTo: aboutSectionView.leadingAnchor, constant: 25),
            feedbackButton.trailingAnchor.constraint(equalTo: aboutSectionView.trailingAnchor, constant: -25),
            feedbackButton.heightAnchor.constraint(equalToConstant: 70),
            feedbackButton.bottomAnchor.constraint(equalTo: aboutSectionView.bottomAnchor, constant: -25),
            
            // Â∫ïÈÉ®ÁïôÁôΩÂå∫ÂüüÁ∫¶Êùü
            bottomSpacerView.topAnchor.constraint(equalTo: aboutSectionView.bottomAnchor, constant: 30),
            bottomSpacerView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
            bottomSpacerView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
            bottomSpacerView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),
            bottomSpacerView.heightAnchor.constraint(greaterThanOrEqualToConstant: 80)
        ])
    }
    
    // MARK: - ‰∏ªÈ¢òËÆæÁΩÆÊñπÊ≥ï
    @objc private func lightModeTapped() {
        setThemeMode(.light)
    }
    
    @objc private func darkModeTapped() {
        setThemeMode(.dark)
    }
    
    @objc private func systemModeTapped() {
        setThemeMode(.unspecified)
    }
    
    private func setThemeMode(_ mode: UIUserInterfaceStyle) {
        currentThemeMode = mode
        
        // ‰øùÂ≠òÁî®Êà∑ÈÄâÊã©Âà∞ UserDefaults
        UserDefaults.standard.set(mode.rawValue, forKey: "UserInterfaceStyle")
        
        // Â∫îÁî®‰∏ªÈ¢òÂà∞ÂΩìÂâçÁ™óÂè£
        if let window = view.window {
            window.overrideUserInterfaceStyle = mode
        }
        
        // Â∫îÁî®‰∏ªÈ¢òÂà∞ÊâÄÊúâÁ™óÂè£
        if let windowScene = view.window?.windowScene {
            windowScene.windows.forEach { window in
                window.overrideUserInterfaceStyle = mode
            }
        }
        
        updateButtonStates()
    }
    
    private func updateCurrentThemeMode() {
        let savedMode = UserDefaults.standard.integer(forKey: "UserInterfaceStyle")
        currentThemeMode = UIUserInterfaceStyle(rawValue: savedMode) ?? .unspecified
    }
    
    private func updateButtonStates() {
        // ÈáçÁΩÆÊâÄÊúâÊåâÈíÆÁä∂ÊÄÅ
        [lightModeButton, darkModeButton, systemModeButton].forEach { button in
            button.backgroundColor = UIColor.tertiarySystemBackground
            button.layer.borderColor = UIColor.separator.cgColor
            button.setTitleColor(UIColor.label, for: .normal)
        }
        
        // ËÆæÁΩÆÂΩìÂâçÈÄâ‰∏≠ÊåâÈíÆÁöÑÁä∂ÊÄÅ
        let selectedButton: UIButton
        switch currentThemeMode {
        case .light:
            selectedButton = lightModeButton
        case .dark:
            selectedButton = darkModeButton
        case .unspecified:
            selectedButton = systemModeButton
        @unknown default:
            selectedButton = systemModeButton
        }
        
        selectedButton.backgroundColor = UIColor.label.withAlphaComponent(0.1)
        selectedButton.layer.borderColor = UIColor.label.cgColor
        selectedButton.setTitleColor(UIColor.label, for: .normal)
    }
    
    // MARK: - Êï∞ÊçÆÁÆ°ÁêÜÊñπÊ≥ï
    @objc private func exportDataTapped() {
        exportData()
    }
    
    @objc private func importDataTapped() {
        importData()
    }
    
    @objc private func clearDataTapped() {
        showClearDataConfirmation()
    }
    
    private func exportData() {
        // Ëé∑ÂèñÊâÄÊúâÊó∂Èó¥ËÆ∞ÂΩï
        guard let data = UserDefaults.standard.data(forKey: "TimeRecords"),
              let records = try? JSONDecoder().decode([TimeRecord].self, from: data) else {
            showAlert(title: "ÂØºÂá∫Â§±Ë¥•", message: "Ê≤°ÊúâÂèØÂØºÂá∫ÁöÑÊï∞ÊçÆ")
            return
        }
        
        // ÂàõÂª∫ÂØºÂá∫Êï∞ÊçÆÁªìÊûÑ
        let exportData = ExportData(
            version: "1.0.0",
            exportDate: Date(),
            records: records
        )
        
        // ÁºñÁ†Å‰∏∫JSON
        guard let jsonData = try? JSONEncoder().encode(exportData) else {
            showAlert(title: "ÂØºÂá∫Â§±Ë¥•", message: "Êï∞ÊçÆÁºñÁ†ÅÂ§±Ë¥•")
            return
        }
        
        // ÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂
        let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent("Mtimes_Export_\(Date().timeIntervalSince1970).json")
        
        do {
            try jsonData.write(to: tempURL)
            
            // ÊòæÁ§∫ÂàÜ‰∫´ÁïåÈù¢
            let activityViewController = UIActivityViewController(activityItems: [tempURL], applicationActivities: nil)
            present(activityViewController, animated: true)
            
        } catch {
            showAlert(title: "ÂØºÂá∫Â§±Ë¥•", message: "Êñá‰ª∂ÂàõÂª∫Â§±Ë¥•: \(error.localizedDescription)")
        }
    }
    
    private func importData() {
        let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: [UTType.json])
        documentPicker.delegate = self
        documentPicker.allowsMultipleSelection = false
        
        present(documentPicker, animated: true)
    }
    
    private func showClearDataConfirmation() {
        let alert = UIAlertController(
            title: "Á°ÆËÆ§Ê∏ÖÁ©∫Êï∞ÊçÆ",
            message: "Ê≠§Êìç‰ΩúÂ∞ÜÂà†Èô§ÊâÄÊúâÊâìÂç°ËÆ∞ÂΩïÔºå‰∏îÊó†Ê≥ïÊÅ¢Â§ç„ÄÇÁ°ÆÂÆöË¶ÅÁªßÁª≠ÂêóÔºü",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "ÂèñÊ∂à", style: .cancel))
        alert.addAction(UIAlertAction(title: "Á°ÆÂÆöÊ∏ÖÁ©∫", style: .destructive) { [weak self] _ in
            self?.clearAllData()
        })
        
        present(alert, animated: true)
    }
    
    private func clearAllData() {
        // Ê∏ÖÁ©∫UserDefaults‰∏≠ÁöÑÊï∞ÊçÆ
        UserDefaults.standard.removeObject(forKey: "TimeRecords")
        
        // ÂèëÈÄÅÈÄöÁü•ÔºåÈÄöÁü•ÂÖ∂‰ªñËßÜÂõæÊõ¥Êñ∞
        NotificationCenter.default.post(name: NSNotification.Name("DataCleared"), object: nil)
        
        showAlert(title: "Êï∞ÊçÆÂ∑≤Ê∏ÖÁ©∫", message: "ÊâÄÊúâÊâìÂç°ËÆ∞ÂΩïÂ∑≤Ë¢´Âà†Èô§")
    }
    
    private func showAlert(title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Á°ÆÂÆö", style: .default))
        present(alert, animated: true)
    }
    
    private func showImportConfirmationAlert(recordCount: Int) {
        let alert = UIAlertController(
            title: "Á°ÆËÆ§ÂØºÂÖ•",
            message: "Â∞ÜÂØºÂÖ• \(recordCount) Êù°ÊâìÂç°ËÆ∞ÂΩïÔºåËøôÂ∞ÜË¶ÜÁõñÁé∞ÊúâÊï∞ÊçÆ„ÄÇÁ°ÆÂÆöË¶ÅÁªßÁª≠ÂêóÔºü",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "ÂèñÊ∂à", style: .cancel))
        alert.addAction(UIAlertAction(title: "Á°ÆÂÆöÂØºÂÖ•", style: .destructive) { [weak self] _ in
            self?.performImport()
        })
        
        present(alert, animated: true)
    }
    
    private func performImport() {
        // Ëé∑ÂèñÂØºÂÖ•ÁöÑÊï∞ÊçÆÂπ∂‰º†ÈÄíÁªôTimeRecordManager
        if let data = UserDefaults.standard.data(forKey: "TimeRecords"),
           let records = try? JSONDecoder().decode([TimeRecord].self, from: data) {
            
            // ÂàõÂª∫TimeRecordManagerÂÆû‰æãÂπ∂ÂØºÂÖ•Êï∞ÊçÆ
            let timeRecordManager = TimeRecordManager()
            timeRecordManager.importRecords(records)
            
            // ÂèëÈÄÅÈÄöÁü•ÔºåÈÄöÁü•ÂÖ∂‰ªñËßÜÂõæÊõ¥Êñ∞
            NotificationCenter.default.post(name: NSNotification.Name("ImportDataRequested"), object: nil)
            
            showAlert(title: "ÂØºÂÖ•ÊàêÂäü", message: "Â∑≤ÊàêÂäüÂØºÂÖ• \(records.count) Êù°ÊâìÂç°ËÆ∞ÂΩï")
        } else {
            showAlert(title: "ÂØºÂÖ•Â§±Ë¥•", message: "Êï∞ÊçÆÊ†ºÂºèÈîôËØØ")
        }
    }
    
    // MARK: - ÂÖ≥‰∫éËΩØ‰ª∂ÈÉ®ÂàÜÊñπÊ≥ï
    @objc private func versionButtonTapped() {
        let alert = UIAlertController(
            title: "ÁâàÊú¨‰ø°ÊÅØ",
            message: "Mtimes Êó∂Èó¥ËÆ∞ÂΩïÂ∫îÁî®\nÁâàÊú¨: 1.0.0\nÊûÑÂª∫Êó•Êúü: 2025Âπ¥8Êúà\nÂºÄÂèëËÄÖ: Mclarenlife",
            preferredStyle: .alert
        )
        alert.addAction(UIAlertAction(title: "Á°ÆÂÆö", style: .default))
        present(alert, animated: true)
    }
    
    @objc private func feedbackButtonTapped() {
        let alert = UIAlertController(
            title: "ÂèçÈ¶àËÅîÁ≥ª",
            message: "Â¶ÇÊûúÊÇ®Êúâ‰ªª‰ΩïÈóÆÈ¢ò„ÄÅÂª∫ËÆÆÊàñÂèçÈ¶àÔºåËØ∑ÈÄöËøá‰ª•‰∏ãÊñπÂºèËÅîÁ≥ªÊàë‰ª¨Ôºö\n\nÈÇÆÁÆ±: xiangjinleee@gmail.com\n\nÊàë‰ª¨‰ºöÂ∞ΩÂø´ÂõûÂ§çÊÇ®ÁöÑÈÇÆ‰ª∂„ÄÇ",
            preferredStyle: .alert
        )
        
        // Ê∑ªÂä†Â§çÂà∂ÈÇÆÁÆ±ÊåâÈíÆ
        alert.addAction(UIAlertAction(title: "Â§çÂà∂ÈÇÆÁÆ±", style: .default) { _ in
            UIPasteboard.general.string = "support@mtimes.com"
            self.showAlert(title: "Â∑≤Â§çÂà∂", message: "ÈÇÆÁÆ±Âú∞ÂùÄÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø")
        })
        
        alert.addAction(UIAlertAction(title: "Á°ÆÂÆö", style: .default))
        present(alert, animated: true)
    }
}

// MARK: - UIDocumentPickerDelegate
extension SettingsViewController: UIDocumentPickerDelegate {
    func documentPicker(_ controller: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
        guard let url = urls.first else { return }
        
        do {
            let jsonData = try Data(contentsOf: url)
            let exportData = try JSONDecoder().decode(ExportData.self, from: jsonData)
            
            // ÊòæÁ§∫Á°ÆËÆ§ÂØπËØùÊ°Ü
            showImportConfirmationAlert(recordCount: exportData.records.count)
            
            // ‰øùÂ≠òÂØºÂÖ•ÁöÑÊï∞ÊçÆÂà∞UserDefaults
            if let encoded = try? JSONEncoder().encode(exportData.records) {
                UserDefaults.standard.set(encoded, forKey: "TimeRecords")
            }
            
        } catch {
            showAlert(title: "ÂØºÂÖ•Â§±Ë¥•", message: "Êñá‰ª∂Ê†ºÂºèÈîôËØØÊàñÊçüÂùè: \(error.localizedDescription)")
        }
    }
}

// MARK: - ÂØºÂá∫Êï∞ÊçÆÁªìÊûÑ
struct ExportData: Codable {
    let version: String
    let exportDate: Date
    let records: [TimeRecord]
}
